import{_ as t,c as a,o as r,U as p}from"./chunks/framework.BS5Zd73-.js";const o="/assets/8.veSdUiY4.png",s="/assets/9.NOGEx3Q1.png",n="/assets/10.oFFMTnVK.png",e="/assets/11.hlOy4JYJ.png",i="/assets/12.FfIyKADe.png",l="/assets/13.2x_stdHL.png",d="/assets/14.pBg0SPUi.png",h="/assets/15.7wppb5M7.png",g="/assets/16.dp06Hze9.png",c="/assets/17.Rvx-nyCY.png",u="/assets/18.jPfgPlol.png",C=JSON.parse('{"title":"数据的表示和运算","description":"","frontmatter":{},"headers":[],"relativePath":"study/PrinciplesOfComputerComposition/数据的表示和运算.md","filePath":"study/PrinciplesOfComputerComposition/数据的表示和运算.md","lastUpdated":null}'),_={name:"study/PrinciplesOfComputerComposition/数据的表示和运算.md"},b=p('<div><h1 id="数据的表示和运算" tabindex="-1">数据的表示和运算 <a class="header-anchor" href="#数据的表示和运算" aria-label="Permalink to &quot;数据的表示和运算&quot;">​</a></h1><h2 id="进位计数制" tabindex="-1">进位计数制 <a class="header-anchor" href="#进位计数制" aria-label="Permalink to &quot;进位计数制&quot;">​</a></h2><p>r进制：数值 x 位权</p><p><strong>计数</strong>：每个数码位所用到的不同符号的个数，r进制的基数为r</p><p><strong>真值和机器数</strong>：</p><ol><li>真值：符合人类习惯的数字</li><li>机器数：数字实际存到机器里的形式，正负号需要被“数字化”</li></ol><h2 id="bcd码" tabindex="-1">BCD码 <a class="header-anchor" href="#bcd码" aria-label="Permalink to &quot;BCD码&quot;">​</a></h2><p>使用二进制编码的十进制</p><p>8421码(有权码)的映射关系：</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>0000</td><td>0001</td><td>0010</td><td>0011</td><td>0100</td><td>0101</td><td>0110</td><td>0111</td><td>1000</td><td>1001</td></tr></tbody></table><table><thead><tr><th>十进制</th><th>5</th><th>+</th><th>8</th><th>=</th><th>13</th></tr></thead><tbody><tr><td>8421</td><td>0101</td><td>+</td><td>1000</td><td>=</td><td>1101</td></tr></tbody></table><p>1101不在映射表内，所以在1101的基础上加6 -&gt; 1(1) 0011(3)</p><ul><li><p>余3码(无权码)：8421码+ (0011)2</p></li><li><p>2421码：改变权值定义</p></li></ul><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>0000</td><td>0001</td><td>0010</td><td>0011</td><td>0100</td><td>1011</td><td>1100</td><td>1101</td><td>1110</td><td>1111</td></tr></tbody></table><p>注意：5以后 首位必须是1</p><h2 id="无符号整数的表示和运算" tabindex="-1">无符号整数的表示和运算 <a class="header-anchor" href="#无符号整数的表示和运算" aria-label="Permalink to &quot;无符号整数的表示和运算&quot;">​</a></h2><p><strong>无符号整数</strong></p><p>①全部二进制位都是数值位，没有符号位，第i位的位权是2^(i-1)</p><p>②n bit 无符号整数**表示范围0~2^n-1，超出则益处</p><p>③可以表示的<strong>最小的数 全0</strong>，可以表示<strong>最大的数 全1</strong></p><ul><li><p>加法：从最低位开始，按位相加，并往更高位进位</p></li><li><p>减法：</p><ul><li>“被减数”不变，<strong>减数</strong>全部按位取反、末位+1，减法变加法</li><li>从最低位开始，<strong>按位相加</strong>，并往更高位<strong>进位</strong></li></ul></li></ul><h2 id="带符号整数的表示" tabindex="-1">带符号整数的表示 <a class="header-anchor" href="#带符号整数的表示" aria-label="Permalink to &quot;带符号整数的表示&quot;">​</a></h2><h3 id="原码" tabindex="-1">原码 <a class="header-anchor" href="#原码" aria-label="Permalink to &quot;原码&quot;">​</a></h3><p>符号位 + (n-1)数值位</p><ul><li><p>符号位”0/1“对应”正/负“，剩余的数值为表示真值得绝对值-</p></li><li><p>真值0有两种表示形式：+0 -0</p></li></ul><p><strong>缺点</strong>：符号位不能参与运算</p><h3 id="补码" tabindex="-1">补码 <a class="header-anchor" href="#补码" aria-label="Permalink to &quot;补码&quot;">​</a></h3><p><img src="'+o+'" alt="8.png"></p><p>负数：从右往左找到第一个1，这个1左边得所有”数值位“按位取反</p><p><img src="'+s+'" alt="9.png"></p><h3 id="移码" tabindex="-1">移码 <a class="header-anchor" href="#移码" aria-label="Permalink to &quot;移码&quot;">​</a></h3><p>在补码的基础上将<strong>符号位取反</strong></p><h2 id="定点小数" tabindex="-1">定点小数 <a class="header-anchor" href="#定点小数" aria-label="Permalink to &quot;定点小数&quot;">​</a></h2><p>定点整数的编码标识：原码、反码、补码、移码</p><p>定点小数的编码标识：源码、反码、补码</p><p><strong>对两个定点小数A、B进行加法/减法时，需要先转换为补码</strong></p><p>计算机硬件如何做<strong>定点小数补码</strong>的<strong>加法</strong>：从最低位开始，<strong>按位相加（符号位参与运算）</strong>，并往更高位<strong>进位</strong></p><p>计算机硬件如何做<strong>定点小数补码</strong>的<strong>减法</strong>：</p><p>①“被减数”不变，<strong>”减数“<strong>全部</strong>按位取反、末位+1</strong>，减法变加法</p><p>②从最低位开始，<strong>按位相加</strong>，并往更高位<strong>进位</strong></p><h2 id="算数逻辑单元" tabindex="-1">算数逻辑单元 <a class="header-anchor" href="#算数逻辑单元" aria-label="Permalink to &quot;算数逻辑单元&quot;">​</a></h2><h3 id="电路的基本原理" tabindex="-1">电路的基本原理 <a class="header-anchor" href="#电路的基本原理" aria-label="Permalink to &quot;电路的基本原理&quot;">​</a></h3><p>ALU</p><p><img src="'+n+'" alt="10.png"></p><table><thead><tr><th></th><th>功能</th></tr></thead><tbody><tr><td>算数运算</td><td>加、减、乘、除等</td></tr><tr><td>逻辑运算</td><td>与、或、非、异或等</td></tr><tr><td>辅助功能</td><td>移位、求补等</td></tr></tbody></table><p><img src="'+e+'" alt="11.png"></p><p><img src="'+i+'" alt="12.png"></p><h3 id="加法器" tabindex="-1">加法器 <a class="header-anchor" href="#加法器" aria-label="Permalink to &quot;加法器&quot;">​</a></h3><p><strong>串行加法器</strong>：只有一个全加器，数据逐位串行，送入加法器中进行运算。进位触发器用来寄存进位信号以便参与下一次运算</p><p><strong>串行进位(行波进位)的并行加法器</strong>：把n个全加器串接起来，就可进行两个n位数的相加（类似多米诺骨牌）</p><p><strong>并行进位的并行加法器</strong>：各级进位信号同时形成，又称为先行进位、同时进位</p><h3 id="补码加减运算器" tabindex="-1">补码加减运算器 <a class="header-anchor" href="#补码加减运算器" aria-label="Permalink to &quot;补码加减运算器&quot;">​</a></h3><h4 id="加法器原理" tabindex="-1">加法器原理 <a class="header-anchor" href="#加法器原理" aria-label="Permalink to &quot;加法器原理&quot;">​</a></h4><p><img src="'+l+'" alt="13.png"></p><p>例：A=1000 , B=0111 , Cin=0 则F=1111 , Cout=0</p><p>=&gt;A+B+Cin=F</p><p><strong>补码加/减法运算方法</strong>：</p><p>n bit补码X+Y：按位相加即可</p><p>n bit补码X-Y：将补码Y全部按位取反，末位+1，得到[-Y]补，减法变成加法</p><p><img src="'+d+'" alt="14.png"></p><h3 id="加减运算" tabindex="-1">加减运算 <a class="header-anchor" href="#加减运算" aria-label="Permalink to &quot;加减运算&quot;">​</a></h3><p><strong>源码的加法运算</strong>：</p><p>正+正 -&gt; 绝对值做加法，结果为正</p><p>负+负 -&gt; 绝对值做加法，结果为负</p><p>正+负 -&gt; 绝对值大的减绝对值小的，符号同绝对值大的数</p><p>负+正 -&gt; 绝对值大的减绝对值小的，符号同绝对值大的数</p><p><strong>源码的减法运算</strong>：”减数“符号取反，转变为加法：</p><p>正 - 负 -&gt; 正 + 正</p><p>负 - 正 -&gt; 负 + 负</p><p>正 - 正 -&gt; 正 + 负</p><p>负 + 正 -&gt; 负 - 负</p><p>难度较大-&gt;计算机通常用补码进行加减运算</p><p>【例】：设机器字长为8位(含1位符号位)，A=15，B=-24，求[A+B]补和[A-B]</p><p>A=+1111---&gt; 原码: 0,0001111---&gt; 补码: 0,0001111</p><p>B=-11000---&gt; 原码: 1,0011000---&gt; 补码: 1,1101000</p><p>[A+B]补 = [A]补 + [B]补 = 0,0001111 + 1,1101000 = 1,1110111</p><p>原码：1,0001001 真值-9</p><p>负数 补-&gt;原：①数值位取反+1②负数补码中，最右边的1及其右边同原码。最右边的1的左边同反码</p><h3 id="溢出判断" tabindex="-1">溢出判断 <a class="header-anchor" href="#溢出判断" aria-label="Permalink to &quot;溢出判断&quot;">​</a></h3><p>字长为8位：范围为[-128~+127]</p><p>只有”正数+正数“才会<strong>上溢</strong>——正+正 = 负</p><p>只有”负数+负数“才会<strong>下溢</strong>——负+负 = 正</p><p><img src="'+h+'" alt="15.png"></p><p><img src="'+g+'" alt="16.png"></p><p><img src="'+c+'" alt="17.png"></p><h3 id="符号拓展" tabindex="-1">符号拓展 <a class="header-anchor" href="#符号拓展" aria-label="Permalink to &quot;符号拓展&quot;">​</a></h3><p>int -&gt; long , 短数据 -&gt; 长数据</p><ul><li><p>正整数(原、反、补的表示都一样)</p></li><li><p>负整数：</p><ul><li>原码：1,1011010 -&gt; 1,00000000 1011010</li><li>反码：1,0100101 -&gt; 1,11111111 0100101</li><li>补码：1,0100110 -&gt; 1,11111111 0100110</li></ul></li></ul><p><strong>定点整数的符号扩展：</strong> 在原符号位和数值位中间添加新位，正数都添0；负数原码添0，负数反、补码添1</p><ul><li>正小数（原、反、补的表示都一样）</li><li>负小数： <ul><li>原码：1.1011010 -&gt; 1.1011010 00000000</li><li>反码：1.0100101 -&gt; 1.0100101 11111111</li><li>补码：1.0100110 -&gt; 1.0100110 00000000</li></ul></li></ul><p><strong>定点小数的符号扩展：</strong> 在原符号位和数值位中间添加新位，正数都添0；负数原码、补码添0，负数反码添1</p><p><img src="'+u+'" alt="18.png"></p></div>',1),m=[b];function q(f,P,x,k,y,A){return r(),a("div",null,m)}const S=t(_,[["render",q]]);export{C as __pageData,S as default};
