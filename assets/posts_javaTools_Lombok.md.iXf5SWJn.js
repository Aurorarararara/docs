import{_ as t,c as o,o as a,U as e}from"./chunks/framework.BS5Zd73-.js";const r="/assets/1.-fq95ti_.png",d="/assets/2.OnfcU2X6.png",u=JSON.parse('{"title":"Lombok","description":"","frontmatter":{},"headers":[],"relativePath":"posts/javaTools/Lombok.md","filePath":"posts/javaTools/Lombok.md","lastUpdated":null}'),l={name:"posts/javaTools/Lombok.md"},s=e('<div><h1 id="lombok" tabindex="-1">Lombok <a class="header-anchor" href="#lombok" aria-label="Permalink to &quot;Lombok&quot;">​</a></h1><p>官网 <a href="https://projectlombok.org/" target="_blank" rel="noreferrer">https://projectlombok.org/</a></p><h2 id="基本实现原理" tabindex="-1">基本实现原理 <a class="header-anchor" href="#基本实现原理" aria-label="Permalink to &quot;基本实现原理&quot;">​</a></h2><ol><li>注解扫描：Lombok的注解处理器会扫描Java源代码中的注解，并找到使用了Lombok注解的类、字段和方法。</li><li>AST操作：Lombok注解处理器会对注解所标注的类进行抽象语法树（AST）的解析和操作，以识别和处理这些注解。</li><li>注解解析：注解处理器解析找到的注解，确定需要生成的代码类型和内容。</li><li>代码生成：基于注解的定义和规则，Lombok注解处理器生成相应的代码片段，如getter和setter方法、构造函数等。</li><li>代码注入：生成的代码片段被插入到编译结果中的相应位置，与手动编写的代码合并在一起。</li><li>最终编译：编译器将生成的代码和手动编写的代码一起编译为最终的字节码文件。</li></ol><p><strong>普通程序运行原理</strong>： <img src="'+r+'" alt="img.png"></p><p><strong>Lombok运行原理</strong>： <img src="'+d+'" alt="img.png"></p><h2 id="常见的lombok基本注解" tabindex="-1">常见的Lombok基本注解 <a class="header-anchor" href="#常见的lombok基本注解" aria-label="Permalink to &quot;常见的Lombok基本注解&quot;">​</a></h2><table><thead><tr><th>注解</th><th>注解作用</th></tr></thead><tbody><tr><td>@Getter</td><td>自动生成字段的getter方法</td></tr><tr><td>@Setter</td><td>自动生成字段的setter方法</td></tr><tr><td>@ToString</td><td>自动生成toString方法</td></tr><tr><td>@EqualsAndHashCode</td><td>自动生成equals和hashCode方法</td></tr><tr><td>@NoArgsConstructor</td><td>自动生成无参构造函数</td></tr><tr><td>@AllArgsConstructor</td><td>自动生成包含所有字段的构造函数</td></tr></tbody></table><h2 id="常见的lombok组合注解" tabindex="-1">常见的Lombok组合注解 <a class="header-anchor" href="#常见的lombok组合注解" aria-label="Permalink to &quot;常见的Lombok组合注解&quot;">​</a></h2><table><thead><tr><th>注解</th><th>注解作用</th></tr></thead><tbody><tr><td>@Data</td><td>组合了@Getter、@Setter、@ToString、@EqualsAndHashCode等注解的功能</td></tr><tr><td>@Value</td><td>组合了@Getter、@ToString、@EqualsAndHashCode等注解的功能</td></tr></tbody></table><p><strong>ps</strong>：@Data生成的类是可变的，具有可读写的setter方法，@Value生成的类是不可变的，字段是final的，没有生成setter方法</p><h2 id="lombok的其他注解" tabindex="-1">Lombok的其他注解 <a class="header-anchor" href="#lombok的其他注解" aria-label="Permalink to &quot;Lombok的其他注解&quot;">​</a></h2><table><thead><tr><th>注解</th><th>注解作用</th></tr></thead><tbody><tr><td>@Builder</td><td>自动生成Builder模式的构造器方法</td></tr><tr><td>@NonNull</td><td>自动生成非空检查</td></tr><tr><td>@Delegate</td><td>自动生成委托方法</td></tr><tr><td>@Cleanup</td><td>自动释放资源</td></tr></tbody></table></div>',1),i=[s];function n(h,b,m,c,k,p){return a(),o("div",null,i)}const g=t(l,[["render",n]]);export{u as __pageData,g as default};
